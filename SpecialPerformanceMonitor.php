<?php 
/* SpecialPerformanceMonitor
 * 
 * Special Page that visualises the Json Logfiles generated by ProfilerSimpleJson
 * Special:PerformanceMonitor uses one or two Icicle diagrams provided by the InfoVis Toolkit
 */

class JsonIterator implements RecursiveIterator
{
    private $json;
    private $selfWasReturned = false;
	private $childrenIterator;
	private $jsonIterator;
	private $curChild;
	private $counter;
   
    public function __construct($json) {
        $this->json = $json;
		$this->rewind();
    }
   
    public function valid() {
    	$hasMoreJson = ( $this->hasChildren() && $this->jsonIterator->valid() );
    	$hasMoreChildren = ( $this->hasChildren() && $this->childrenIterator->valid() );
		$hasMore = !$this->selfWasReturned 
			|| $hasMoreJson
			|| $hasMoreChildren;
		//$debugText = "hasMoreJson = " . var_export($hasMoreJson, true) . ", hasMoreChildren = " . var_export($hasMoreChildren, true);
        return $hasMore;
    }
   
    public function hasChildren() {
        return isset( $this->json->children ) && is_array( $this->json->children );
    }
   
    public function next() {
		if( !$this->selfWasReturned ) return; // return own json first
		$this->counter++;
		if( isset( $this->jsonIterator ) ) $this->jsonIterator->next();
        if( (!isset( $this->jsonIterator ) || !$this->jsonIterator->valid()) && $this->hasChildren() ) {
			$this->childrenIterator->next();
			if( $this->childrenIterator->valid() ) {
				$this->jsonIterator = new JsonIterator( $this->childrenIterator->current() );
			}
		}
    }
   
    public function current() {
		if( !$this->selfWasReturned ){
			$this->selfWasReturned = true;
			return $this->json;
		}
        return $this->jsonIterator->current();
    }
   
    public function getChildren() {
        return $this->json->children;
   }
   
    public function rewind() {
		$this->counter = 0;
        if( $this->hasChildren() ) {
			$children = $this->json->children;
        	$this->childrenIterator = new ArrayIterator( $children );
			$this->jsonIterator = new JsonIterator( $this->childrenIterator->current() );
			$a = "x"; // breakpoint
        }
    }
   
    public function key() {
        return $this->counter;
    }
}

/*

input:  	$level = $output_array[1];      // "2"
		$duration = $output_array[2];   // "0.001581"
		$mem_difference = $output_array[3];   // "" / "896.6"
		$in_out = $output_array[4];     // "<" / ">"
		$name = $output_array[5];       // "Setup.php-memcachedhello"

output:	"children": [
			{
				"id": "node35",
				"name": "3.5",
				"data": {
					"$area": 10,
					"$dim": 10,
					"$color": "#ff0ca2"
				},
				"children": [ ... ]
			}


*/

class JsonFilter {

	function __construct() {
		// currently not in use
		$this->matchTable = array(
			"count" => "id",
			"function" => "name",
			"data" => "id",
			"count" => "id",
		); 
	}
 
	function transform( $jsonNode, $counter ) {
		
		// translate old to new properties as needed for visualisation
		
		$jsonNode->id = "node". $counter;
		
		if( isset( $jsonNode->function ) ){
			// caught a regular node
			$jsonNode->name = $jsonNode->function;
			$jsonNode->name = $jsonNode->name;
		} else {
			$jsonNode->name = "unknown function";
		}
		
		$lowername = strtolower( $jsonNode->name );
		
		$jsonNode->data = new stdClass();
		
		if( isset( $jsonNode->duration ) ){
			$jsonNode->data->dim = round( floatval( $jsonNode->duration ) * 100000 );
			$jsonNode->data->duration = substr( $jsonNode->duration, 0, 5);
			$jsonNode->data->tooltip = "<b>Duration:</b> " . $jsonNode->duration;
			if( isset( $jsonNode->startTime ) ) $jsonNode->data->startTime = $jsonNode->startTime/1000;
			if( isset( $jsonNode->endTime ) ) $jsonNode->data->endTime = $jsonNode->endTime/1000;
		} else {
			$jsonNode->data->dim = 1000;
		}
		
		
		$jsonNode->data->color = "#548FF4"; // test black/white font-color: "#007845"; 
		
		// color output issues in blue
		if ( strpos( $lowername, "output" ) !== false ) $jsonNode->data->color = "#99CC99";
		
		// color Navigation/Sidebar issues in green
		if ( strpos( $lowername, "nav" ) !== false || strpos( $lowername, "sidebar" ) !== false ) $jsonNode->data->color = "#FFFFCC";
		
		if ( strpos( $jsonNode->name, "SELECT" ) !== false ) {
			$completeQuery = $jsonNode->name;
			$jsonNode->data->tooltip .= "<br/>" . $completeQuery;
			$jsonNode->name = "Database: SELECT";
		}
		
		// delete remaining old properties
		foreach( $jsonNode as $key => $value) { 
		    if( $key != "children" && $key != "name" && $key != "data" && $key != "id" )
		    unset( $jsonNode->$key );
		}
	}

}

class SpecialPerformanceMonitor extends SpecialPage {
	
	protected $filename;
	protected $filename2;
	
	function __construct() {
		global $eg_PM_LocalServer;
		$eg_PM_LocalServer = LocalServer::getImplementation();
		parent::__construct( 'PerformanceMonitor' );
	}
 
	public function execute( $par ) {
		global $eg_PM_filelist, $eg_PM_processes_Json, $eg_PM_processes_Json2, $eg_PM_filename, $eg_PM_filename2;
		
		$this->setHeaders();
		$output = $this->getOutput();
		$output->setPageTitle( 'PerformanceMonitor' );
		
		$this->provide_file_list();					// then stored in global $eg_PM_filelist
		
		$filename_from_URL = $this->getRequest()->getVal( 'filename' );
		$filename2_from_URL = $this->getRequest()->getVal( 'comparewith' );
		
		if( isset( $filename_from_URL ) ) $eg_PM_filename = urldecode( $filename_from_URL );
		if( isset( $filename2_from_URL ) ) $eg_PM_filename2 = urldecode( $filename2_from_URL );
		// otherwise: use the top in the date-sorted list (i.e. the latest)
		foreach ( $eg_PM_filelist as $key => $val ) break;
		if( !isset( $eg_PM_filename ) ) $eg_PM_filename = $val;
		$eg_PM_processes_Json = $this->provide_json_structure( $eg_PM_filename );
		
		if( isset( $eg_PM_filename2 ) && strlen( $eg_PM_filename2 ) > 3 ){
			$eg_PM_processes_Json2 = $this->provide_json_structure( $eg_PM_filename2 );
		}
	}
		
	private function provide_file_list() {		
		global $eg_PM_filelist, $eg_PM_LocalServer;
		
		$file = '*';
		$dir = $eg_PM_LocalServer->getLogfilePath();
		
		$sorted_array = $this->listdir_by_date( $dir . $file );
		
		$eg_PM_filelist = $sorted_array;
	}

	private function listdir_by_date( $pathtosearch ) {
		
		foreach ( glob($pathtosearch) as $filename) {
			$indexTime = filectime( $filename ); // 5673451907543
			while( isset( $file_array[ $indexTime ] ) ) {
				$indexTime++;
			}
			$file_array[ $indexTime ] = basename( $filename ); // or just $filename
		}
		
		sort( $file_array ); // sort by name, i.e. by date
		$file_array = array_reverse ( $file_array ); // reverse = latest first
		return $file_array;
	}
	
	private function provide_json_structure( $filename ) {
				
		global $eg_PM_processes_Json, $objLogJson, $eg_PM_LocalServer;
		$request = $this->getRequest();
		
		# Get request data from, e.g.

		$param = $request->getText( 'param' );
 
		# Do stuff

		//$wikitext = "''->getPrefixedText();'' = '" . $this->getTitle()->getPrefixedText() . "'";
		//$output->addWikiText( $wikitext );

		// for the linewise version: see /var/www/html/ebs-ameise.wob.vw.vwg/httpdocs/vr-wiki/extensions/PerformanceMonitor/SpecialPerformanceMonitor_linewise.php
              //$lines = $this->getLogLines( 'autolog001.log' );

		//$filename = $eg_PM_LocalServer->getLogfileName( "testseite" ); //"werkzeuge", ... //"log-2014-4-2--15-17-32--1396444652";
		
		// if no filename is given via URL params,
		$objLogJson = $this->getLogJson( $filename );

		$jsit = new JsonIterator( $objLogJson );
		$preperator = new JsonFilter();
		$count = 0;

		while( $jsit->valid() ){
			$preperator->transform( $jsit->current(), $count++ );
			$jsit->next();
		}

		$strJson = json_encode( $objLogJson );
		// who the f*** had the fantastic idea to give the data sub-property names with dollar signs???
		// let's add them this way...:
		$jsonStructureCode = preg_replace('/\"(dim|color|tooltip|duration|startTime|endTime)\":/m', '"\$$1":', $strJson);
		
		return $jsonStructureCode;
	}
	

	/*
			  var json = {			// 1
				"id": "node02",
				"name": "Simon",
				"data": {
				  "$area": 8,
				  "$dim": 10,
				  "$color": "#001eff"
				},
				"children": [
					{			// 2
					  "id": "node13",
					  "name": "Jens-Uwe",
					  "data": {
						"$area": 1,
						"$dim": 100,
						"$color": "#9554ff"
					  },
					  "children": [
	*/

	function getLogJson( $filename ) {
		global $eg_PM_LocalServer;
		
        //$strLogJson = file_get_contents( '/var/www/html/ebs-ameise.wob.vw.vwg/httpdocs/vr-wiki/log/autologs/' . $filename, FILE_IGNORE_NEW_LINES | FILE_SKIP_EMPTY_LINES);
		$folder = $eg_PM_LocalServer->getLogfilePath(); //LocalServer::getImplementation()->getLogfilePath();
		if( file_exists ( $folder . $filename ) ) {
			$strLogJson = file_get_contents( $folder . $filename, FILE_IGNORE_NEW_LINES | FILE_SKIP_EMPTY_LINES);
		} else {
			$error_msg = "PerformanceMonitor: das ausgewŠhlte File existiert nicht mehr";
			echo( $error_msg );
			$strLogJson =  '
			{
			    "parent": "root",
			    "level": 0,
			    "children": [
					{
						"function": $error_msg,
						"title": $error_msg,
						"duration": "1000",
					}
				]
			}';			
		}
		
		$objLogJson = json_decode( $strLogJson, false );
		return $objLogJson;
    }
	
    // deprecated. use function getLogJson( $filename ) instead.
	function getLogLines( $filename ) {
		$folder = $eg_PM_LocalServer->getLogfilePath();
		$lines = file( $folder . $filename, FILE_IGNORE_NEW_LINES | FILE_SKIP_EMPTY_LINES);
		return $lines;
	}

	public static function onBeforePageDisplay() {
        if( SpecialPerformanceMonitor::isPerformanceMonitorSpecialPage() ){
			SpecialPerformanceMonitor::includeJS();
			SpecialPerformanceMonitor::includeHtml();
		}
		return true;
    }
    
	public static function isPerformanceMonitorSpecialPage() {
		// do not Profile activities when you are on the PerformanceMonitor Special Page
		// Note: this is a copy of the method of ProfilerSimpleJson class, to make sure
		//   they work independently from each other
		//   (make the special page work when StartProfiler does not exist 
		//   and make the profiler work, when the rest of the extension is not installed)
		global $wgTitle;
		if( isset( $wgTitle ) && method_exists( $wgTitle, 'getDBkey' ) ){
			$hasSpecialNS = $wgTitle->getNamespace() == -1;
			$hasPmPageName = $wgTitle->getDBkey() == 'PerformanceMonitor';
			return ( $hasSpecialNS && $hasPmPageName );
		}
	}
	
    public static function includeJS() {
		
		global $wgOut, $outputPage, $wgResourceModules;
		//$wgOut->addScript( $PerformanceMonitorTemplate + '/jit-2.0.1/Examples/Icicle/example1.js' );
		
		$wgOut->addModules( 'ext.performancemonitor.jit' ); //, 'ext.performancemonitor.diagram'
	
	    // MediaWiki >1.17 Resource Loader.
	    if ( method_exists( 'OutputPage', 'addModules' ) && method_exists( 'SMWOutputs', 'requireResource' ) ) {
	      SMWOutputs::requireResource( 'ext.performancemonitor.jit' );
	      //SMWOutputs::requireResource( 'ext.performancemonitor.diagram' );
	    }
	}
       
	public static function includeHtml() {
		global $wgOut, $wgTitle, $wgScript, $wgServer, $wgSitename, $wgScriptPath;
		global $eg_PM_processes_Json, $eg_PM_processes_Json2, $eg_PM_filelist, $objLogJson;
		global $eg_PM_LocalServer;
		global $eg_PM_Debug, $_SERVER;
		global $eg_PM_filename, $eg_PM_filename2;
		
		$filelist_as_list_entries = '';
		$myUrl = $wgServer . "/" . $wgScript . "?title=Special:PerformanceMonitor";
		
		foreach ( $eg_PM_filelist as $key => $filename) {
			$filelist_as_list_entries .= '
			          <li role="presentation"><a role="menuitem" tabindex="-1" href="' . $myUrl . '&filename=' . urlencode( $filename ) . '">' . $filename . '</a></li>';
		};
		
		$filelist2_as_list_entries = '';
		$myUrl = $wgServer . "/" . $wgScript . "?title=Special:PerformanceMonitor";
		foreach ( $eg_PM_filelist as $key => $filename) {
			$filelist2_as_list_entries .= '
			          <li role="presentation"><a role="menuitem" tabindex="-1" href="' . $myUrl;
			if( isset( $eg_PM_filename ) && strlen( $eg_PM_filename ) > 2 ) {
				$filelist2_as_list_entries .= '&filename=' . urlencode( $eg_PM_filename );
			}
			$filelist2_as_list_entries .= '&comparewith=' . urlencode( $filename ) . '">' . $filename . '</a></li>';
		};
		
		if( isset( $eg_PM_processes_Json2 ) && strlen( $eg_PM_processes_Json2 ) > 10 ) {
			$eg_PM_processes_Json2 = 'var json2 = ' . $eg_PM_processes_Json2 . ';';
		} else {
			$eg_PM_processes_Json2 = '';
		}
		
		$wgOut->addHTML('
		
		<style>
		
		body {
			font-family: Gill Sans, Helvetica, Futura, Calibri, Verdana, Arial, sans-serif;
		}
		.node {
			text-align:center;
			white-space:pre-wrap;
			display:table-cell;
			vertical-align:middle;
		}
		h1#firstHeading  {
			padding-bottom: 10px;
			border-bottom: 0px;
		}
		h4#wikiname { margin-bottom:0px }
		div.subtitle {
			margin-bottom:16px;
			text-transform:uppercase;
		}
		#container {
			position:absolute;
			border: 1px solid #DDD;
			background-color: #FFF;
		}
		#container_menue {
			overflow: visible;
			width: 100%; /* left: 160px; */
		}
		#container_icicle1, #container_icicle2 {
			/* left: 160px; */
			border: 1px solid #DDD;
			margin-top: -1px;
			margin-bottom: -1px;
		}
		ul.nav-pills { margin-left:0px }
		li.dropdown, li.active { margin-top: 10px; }
		li.dropdown {
			border: 1px solid #DDDDDD;
			border-radius: 4px;
			margin-left: 0 !important;
			margin-top: 10px;
			width: 122px;
			font-size: 9px;
		}
		.nav-pills > li.active > a, .nav-pills > li.active > a:hover, .nav-pills > li.active > a:focus {
			background-color: #FFFFFF;
			border: 1px solid #DDDDDD;
		}
		.nav-pills > li.active {
			float: left;
		}
		.nav-pills > li.dropdown {
			float: none;
		}
		div.menue-box {
			background-color: #FFFFFF;
			/* border-color: #DDDDDD; */
			border-radius: 0 4px 4px 0;
			border-width: 1px;
			box-shadow: none;
			margin-left: 0;
			margin-right: 0;
		}
		.nav > li > a {
		 	link="#686C70";
		 	vlink="#686C70";
		 	alink="#FF0000";
			text-transform:uppercase;
			font-size: 9px;
		}
		
		#foo {
			background-image: -webkit-gradient(
				linear,
				left top,
				left bottom,
				color-stop(0, #1DFA00),
				color-stop(0.94, #FA0000)
			);
			background-image: -o-linear-gradient(bottom, #1DFA00 0%, #FA0000 94%);
			background-image: -moz-linear-gradient(bottom, #1DFA00 0%, #FA0000 94%);
			background-image: -webkit-linear-gradient(bottom, #1DFA00 0%, #FA0000 94%);
			background-image: -ms-linear-gradient(bottom, #1DFA00 0%, #FA0000 94%);
			background-image: linear-gradient(to bottom, #1DFA00 0%, #FA0000 94%);
		} /* more styles in the element */
		#section {
			background-color: transparent;
			border: 3px solid #CCC
		} /* more styles in the element */

		</style>							<!--   END CSS-STYLES   -->
		
		
		
		<script type="text/javascript">		<!--   START JAVASCRIPT   -->
		
		var icicle1;
		var icicle2;
		var log_conter = 0;				
		
		// init Dropdown
		
		jQuery(document).ready(function() {
			jQuery("#nav li:has(ul)").hover(function(){
				jQuery(this).find("ul").slideDown();
			}, function(){
				jQuery(this).find("ul").hide();
			});
		});


		// init Icicle
		
		var labelType, useGradients, nativeTextSupport, animate;

		(function() {
		  var ua = navigator.userAgent,
			  iStuff = ua.match(/iPhone/i) || ua.match(/iPad/i),
			  typeOfCanvas = typeof HTMLCanvasElement,
			  nativeCanvasSupport = (typeOfCanvas == "object" || typeOfCanvas == "function"),
			  textSupport = nativeCanvasSupport 
				&& (typeof document.createElement("canvas").getContext("2d").fillText == "function");
		  //I"m setting this based on the fact that ExCanvas provides text support for IE
		  //and that as of today iPhone/iPad current text support is lame
		  labelType = (!nativeCanvasSupport || (textSupport && !iStuff))? "Native" : "HTML";
		  nativeTextSupport = labelType == "Native";
		  useGradients = nativeCanvasSupport;
		  animate = !(iStuff || !nativeCanvasSupport);
		})();

		var Log = {
		  elem: false,
		  write: function(text){
			if (!this.elem) 
			  this.elem = document.getElementById("log");
			this.elem.innerHTML = text;
			this.elem.style.left = (500 - this.elem.offsetWidth / 2) + "px";
		  }
		};

		function init( width, height ){
		  //left panel controls
		  controls();

		  // init data														<!--   INCLUDE JSON CODES   -->
		
		  var json = ' . $eg_PM_processes_Json . ';
		  var json2 = null;
		  ' . $eg_PM_processes_Json2 . ' // includes the javascript code "json2 = " + json + ";" -- see above...
		
		  // end json
		  
		  var obj_icicle1_config = {													<!--   icicle1 CONFIG   -->
			"width": width,  
			"height": height,
			// id of the visualization container
			injectInto: "infovis1",
			// whether to add transition animations
			animate: json2 ? false : animate,
			// nodes offset
			offset: 1,
			// whether to add cushion type nodes
			cushion: false,
			//show only five levels at a time
			constrained: true,
			levelsToShow: 5,
			// enable tips
			Tips: {
			  enable: true,
			  type: "HTML",
			  // add positioning offsets
			  offsetX: 20,
			  offsetY: 20,
			  // implement the onShow method to
			  // add content to the tooltip when a node
			  // is hovered
			  onShow: function(tip, node){
				// count children
				var count = 0;
				node.eachSubnode(function(){
				  count++;
				});
				// add tooltip info
				tip.innerHTML = "<div class=\"tip-title\"><b>Name:</b> " + node.name + "</div>"
					+ "<div class=\"tip-text\"><b>Children:</b> " + count + "</div>"
					+ "<div class=\"tip-text\">" + node.data[ "$tooltip" ] + "</div>";
			  }
			},
			// Add events to nodes
			Events: {
			  enable: true,
			  onMouseEnter: function(node) {
				//add border and replot node
				node.setData("border", "#33dddd");
				icicle1.fx.plotNode(node, icicle1.canvas);
				icicle1.labels.plotLabel(icicle1.canvas, node, icicle1.controller);
			  },
			  onMouseLeave: function(node) {
				node.removeData("border");
				icicle1.fx.plot();
			  },
			  onClick: function(node){
				if (node) {
				  //hide tips and selections
				  icicle1.tips.hide();
				  if(icicle1.events.hovered)
					this.onMouseLeave(icicle1.events.hovered);
				  //perform the enter animation
				  icicle1.enter(node);
				  root_node = icicle1.graph.nodes.node0;
				  var rel_height = node.data[ "$endTime" ] - node.data[ "$startTime" ];
				  var rel_pos = node.data[ "$startTime" ];
					 var root_node = icicle1.graph.nodes.node0;
					 var total_duration_sec = root_node.getData("duration");
					 var total_startTime_sec = root_node.getData("startTime");
					 var bar_top = jQuery( "#foo" ).css( "top" );
					 var bar_top_num = Number( bar_top.substring( 0, bar_top.length-2 ) );
					 var bar_height = jQuery( "#foo" ).css( "height" ); // "100px"
					 var bar_height_num = Number( bar_height.substring( 0, bar_height.length-2 ) ); // 100
					 var height_factor = bar_height_num / Number( total_duration_sec );
					 var section_duration_sec = node.getData("duration");
					 var section_height = Math.round( ( section_duration_sec * height_factor ) ) + "px";
					 var section_rel_startTime = Number( node.getData("startTime") ) - Number( total_startTime_sec );
					 var section_top = Math.round( section_rel_startTime * 1000 * height_factor + bar_top_num ) + "px";
					
					 jQuery( "#section" )
					   .css( "top", section_top )
					   .css( "height", section_height );
				 }
			  },
			  onRightClick: function(){
				//hide tips and selections
				icicle1.tips.hide();
				if(icicle1.events.hovered)
				  this.onMouseLeave(icicle1.events.hovered);
				//perform the out animation
				icicle1.out();
			  }
			},
			// Add canvas label styling
			Label: {
			  type: "HTML" // labelType // "Native" or "HTML"
			},
			// Add the name of the node in the corresponding label
			// This method is called once, on label creation and only for DOM and not
			// Native labels.
			onCreateLabel: function(domElement, node){
			  domElement.innerHTML = 
			  		"<div style=\'display:table; overflow:hidden; width:100%; height:100%\'><div style=\'display:table-cell; vertical-align:middle;\'>"			  		
			  		 + node.name
			  		 + "<br/>"
			  		 + node.data[ "$duration" ]
			  		 + "</div></div>";
			  var style = domElement.style;
			  style.fontSize = "0.9em";
			  style.display = "";
			  style.cursor = "pointer";
			  style.color = "#FFF";
			  //style.width = "100%";
			  style.overflow = "hidden";
			  /*var bgcolor = jQuery( domElement ).css( "background-color" ); // returns rgb(65, 136, 251)
			  // node.Node.color, aber da kommt kein rgb-Format raus...
			  var rgb = bgcolor.match( /rgb\((\d*), (\d*), (\d*)\)/ );
			  var rgb_sum =  Number( rgb[1] ) + Number( rgb[2] ) + Number( rgb[3] );
			  if( rgb_sum > 450 ) style.color = "#000";*/
			},
			// Change some label dom properties.
			// This method is called each time a label is plotted.
			onPlaceLabel: function(domElement, node){
			  var style = domElement.style,
				  width = node.getData("width"),
				  height = node.getData("height");
			  /*if(width < 7 || height < 7) {
				style[ "padding-top" ] = "0px";
				style[ "line-height" ] = "1em";
			  } else {*/
				style.display = "";
				style.width = width + "px";
				style.height = height + "px";
			  //}
			}
		  }
		  
		  // init Icicle								<!--   INIT ICICLE   -->

		  function init_icicle( obj_icicle1_config, json ){
			  var new_icicle = new $jit.Icicle( obj_icicle1_config );
			  // load data
			  new_icicle.loadJSON( json );
			  // compute positions and plot
			  new_icicle.refresh();
			  return new_icicle;
		  }

		  icicle1 = init_icicle( obj_icicle1_config, json );
		  
		  // the following are just tests to find out how to scale the icicle
		  // diagrams according to the size of the red-green bar:
		  
		  //icicle1.canvas.scale( 1, 0.5 );
		  /*size1 = icicle1.canvas.getSize(); //returns { width: 900, height: 500 }
		  height1 =   size1.height;
		  size1.height = height1/2;
		  icicle1.canvas.resize( size1.width, size1.height );*/
		  
		  if( json2 ) {

		  		var obj_icicle2_config = {													<!--   icicle2 CONFIG   -->
					"width": width,  
					"height": height,
					// id of the visualization container
					injectInto: "infovis2",
					// whether to add transition animations
					animate: false,
					// nodes offset
					offset: 1,
					// whether to add cushion type nodes
					cushion: false,
					//show only five levels at a time
					constrained: true,
					levelsToShow: 5,
					// enable tips
					Tips: {
					  enable: false,   // changed by Achim - performance???
					  type: "HTML",
					  // add positioning offsets
					  offsetX: 20,
					  offsetY: 20,
					  // implement the onShow method to
					  // add content to the tooltip when a node
					  // is hovered
					  onShow: function(tip, node){
						// count children
						var count = 0;
						node.eachSubnode(function(){
						  count++;
						});
						// add tooltip info
						tip.innerHTML = "<div class=\"tip-title\"><b>Name:</b> " + node.name + "</div>"
							+ "<div class=\"tip-text\"><b>Children:</b> " + count + "</div>"
							+ "<div class=\"tip-text\">" + node.data[ "$tooltip" ] + "</div>";
					  }
					},
					// Add events to nodes
					Events: {
					  enable: true,
					  onMouseEnter: function(node) {
						//add border and replot node
						node.setData("border", "#33dddd");
						icicle2.fx.plotNode(node, icicle2.canvas);
						icicle2.labels.plotLabel(icicle2.canvas, node, icicle2.controller);
					  },
					  onMouseLeave: function(node) {
						node.removeData("border");
						icicle2.fx.plot();
					  },
					  onClick: function(node){
						if (node) {
						  //hide tips and selections
						  icicle2.tips.hide();
						  if(icicle2.events.hovered)
							this.onMouseLeave(icicle2.events.hovered);
						  //perform the enter animation
						  icicle2.enter(node);
						  jQuery( "#section" ).css( "height", "60px" );
						}
					  },
					  onRightClick: function(){
						//hide tips and selections
						icicle2.tips.hide();
						if(icicle2.events.hovered)
						  this.onMouseLeave(icicle2.events.hovered);
						//perform the out animation
						icicle2.out();
					  }
					},
					// Add canvas label styling
					Label: {
					  type: "HTML" // labelType // "Native" or "HTML"
					},
					// Add the name of the node in the corresponding label
					// This method is called once, on label creation and only for DOM and not
					// Native labels.
					onCreateLabel: function(domElement, node){
					  domElement.innerHTML = 
					  		"<div style=\'display:table; overflow:hidden; width:100%; height:100%\'><div style=\'display:table-cell; vertical-align:middle;\'>"			  		
					  		 + node.name
					  		 + "<br/>"
					  		 + node.data[ "$duration" ]
					  		 + "</div></div>";
					  var style = domElement.style;
					  style.fontSize = "0.9em";
					  style.display = "";
					  style.cursor = "pointer";
					  style.color = "#FFF";
					  //style.width = "100%";
					  style.overflow = "hidden";
					  /*var bgcolor = jQuery( domElement ).css( "background-color" ); // returns rgb(65, 136, 251)
					  // node.Node.color, aber da kommt kein rgb-Format raus...
					  var rgb = bgcolor.match( /rgb\((\d*), (\d*), (\d*)\)/ );
					  var rgb_sum =  Number( rgb[1] ) + Number( rgb[2] ) + Number( rgb[3] );
					  if( rgb_sum > 450 ) style.color = "#000";*/
					},
					// Change some label dom properties.
					// This method is called each time a label is plotted.
					onPlaceLabel: function(domElement, node){
					  var style = domElement.style,
						  width = node.getData("width"),
						  height = node.getData("height");
					  /*if(width < 7 || height < 7) {
						style[ "padding-top" ] = "0px";
						style[ "line-height" ] = "1em";
					  } else {*/
						style.display = "";
						style.width = width + "px";
						style.height = height + "px";
					  //}
					}
				  }

				  var icicle2 = init_icicle( obj_icicle2_config, json2 );
		  }
		  
		  //end
		}

		//init controls									<!--   INIT CONTROLS   -->
		function controls() {
		  var jit = $jit;
		  var gotoparent = jit.id( "btn_gotoparent" );
		  jit.util.addEvent( gotoparent, "click", function() {
			icicle1.out();
		  });
		  var gototop = jit.id( "btn_gototop" );
		  jit.util.addEvent( gototop, "click", function() {
		    var root_node = icicle1.graph.nodes.node0;
			icicle1.enter( root_node );
			icicle1.labels.clearLabels();
			icicle1.refresh();
		  });
		  //var levelsToShowSelect = jit.id("i-levels-to-show");
		  //jit.util.addEvent(levelsToShowSelect, "change", function () {
		  // jQuery( "#action-1" ).click( function(e) {
		  // var index = levelsToShowSelect.selectedIndex;
		  selectLevelsToShow = function( numLevels ) {
			if( numLevels == 0 ) {
			  icicle1.config.constrained = false;
			} else {
			  icicle1.config.constrained = true;
			  icicle1.config.levelsToShow = numLevels;
			}
			icicle1.refresh();
		  	//e.preventDefault();
		  };
		}

		
		Layout = function( table_html, layout_id, debug_mode ){								<!--   LAYOUT   -->
			this.layout_id = layout_id;
			this.define_minime_table( table_html );
			if( debug_mode ){
				jQuery( this.minime ).css( "border", "1px solid #333" );
			}
		};
		
		Layout.prototype.define_minime_table = function( str_minime_html ){
		  this.minime = jQuery( str_minime_html ).prop( { "id": "minime_" + this.layout_id, "class": "layout" } );
		  jQuery( this.minime ).find( "td" ).each( function( index, element ) { if( element.id ) $(this).attr( "id",  "minime_" + this.id ) }); 
		  jQuery( this.minime ).appendTo( "#minime_Layouts" );
		  jQuery( "#minime_Layouts" ).css( { "overflow-y":"hidden", height:"0px" } );
		}
		
		Layout.prototype.get_layout_by_cell_id = function( cell_id ){
		
		  // store values in debug mode with visible layout
		  var border = jQuery( this.minime ).css( "border" );
		  var padding = jQuery( this.minime ).css( "padding" );
		  var margin = jQuery( this.minime ).css( "margin" );
		  
		  // get rid of values that might irritate the layout
		  jQuery( this.minime )
		  	.css( "border-collapse", "collapse" )
		    .css( "border", "0px" )
		    .css( "padding", "0px" )
		    .css( "margin", "0px" );
		  
		  var cell_selector = "table#minime_" + this.layout_id + " td#minime_" + cell_id;
		  var cell = jQuery( cell_selector );
		
		  var left_px = jQuery( cell ).offset().left - jQuery( this.minime ).offset().left;
		  var top_px = jQuery( cell ).offset().top - jQuery( this.minime ).offset().top;
		  var layout = { left: left_px, width: jQuery( cell ).innerWidth(), height: jQuery( cell ).innerHeight(), top: top_px };
		  
		  // restore former values
		  jQuery( this.minime ).css( "border", border );
		  jQuery( this.minime ).css( "padding", padding );
		  jQuery( this.minime ).css( "margin", margin );
		  
		  return layout;
		}
		
		Layout.prototype.set_width_height = function( total_width, total_height ){
		  total_width = Math.round( total_width );
		  jQuery( this.minime ).css( { width: total_width,  min_width: total_width } );
		  total_height = Math.round( total_height );
		  jQuery( this.minime ).css( { height: total_height,  min_height: total_height } );
		}
		
		table_one = ""																	<!--   MINIME TABLE   -->
		+ "<table cell-padding=\"0px\" cell-spacing=\"0px\">"
		+ "  <tr>"
		+ "    <td id=\"menue\" style=\"width:20%\"></td>"
		+ "    <td id=\"icicle1\" style=\"width:80%\"></td>"
		+ "  </tr>"
		+ "</table>";

		table_one_plus = ""																
		+ "<table cell-padding=\"0px\" cell-spacing=\"0px\">"
		+ "  <tr>"
		+ "    <td id=\"menue\" style=\"width:17%\"></td>"
		+ "    <td id=\"leiste\" style=\"width:2%\"></td>"
		+ "    <td id=\"spalte\" style=\"width:1%\"></td>"
		+ "    <td id=\"icicle1\" style=\"width:80%\"></td>"
		+ "  </tr>"
		+ "</table>";

		table_two = ""																
		+ "<table cell-padding=\"0px\" cell-spacing=\"0px\">"
		+ "  <tr>"
		+ "    <td id=\"menue\" style=\"width:20%\"></td>"
		+ "    <td id=\"icicle1\" style=\"width:38%\"></td>"
		+ "    <td id=\"spalte\" style=\"width:4%\"></td>"
		+ "    <td id=\"icicle2\" style=\"width:38%\"></td>"
		+ "  </tr>"
		+ "</table>";
		
		scroll_to_heading = function() {
			jQuery("html, body").animate({
		        scrollTop: $("h1#firstHeading").offset().top
		    }, 1000);
		}
		
		jQuery(document).ready(function() {											<!--   DOCUMENT READY   -->
		
			jQuery( "#contentSub" ).remove();
			scroll_to_heading();
		    		
		    var offset = jQuery( "#container" ).offset();
		    var dimensions = {};
		    dimensions.width = jQuery( window ).width() - offset.left - 20;
		    dimensions.height = jQuery( window ).height() - jQuery( "h1#firstHeading" ).outerHeight() - 10;
		    
		    var filename2 = "' . $eg_PM_filename2 . '";
		    filename2.length < 3 ? deftable = table_one_plus : deftable = table_two;
		    
		    var layout = new Layout( deftable, "page_layout", ' . $eg_PM_Debug . ' );
		    layout.set_width_height( dimensions.width, dimensions.height );
		    
		    var layout_menue = layout.get_layout_by_cell_id( "menue" );
		    var layout_icicle1 = layout.get_layout_by_cell_id( "icicle1" );
		    if( deftable == table_two ) var layout_icicle2 = layout.get_layout_by_cell_id( "icicle2" );
		    
		    jQuery( "#container" )
			 .css( "width", dimensions.width.toString() + "px" )
			 .css( "height", dimensions.height.toString() + "px" );
		    
		    jQuery( "#container_menue" )
			 .css( "width", layout_menue.width.toString() + "px" )
			 .css( "height",layout_menue.height.toString() + "px" )
			 .css( "top",   layout_menue.top.toString() + "px" )
			 .css( "left",  layout_menue.left.toString() + "px" );
			 
		    if( deftable == table_one_plus ) {
		    	var layout_bar = layout.get_layout_by_cell_id( "leiste" );
				jQuery( "#foo, #section" )
				 .css( "width", layout_bar.width.toString() + "px" )
				 .css( "height",layout_bar.height.toString() + "px" )
				 .css( "top",   layout_bar.top.toString() + "px" )
				 .css( "left",  layout_bar.left.toString() + "px" );
			}
			 
			mw.loader.using( [ "ext.performancemonitor.jit" ], function () {
				
				setup_icicle = function( icicle_id, layout_icicle ) {
				    var container_selector = "#container_" + icicle_id + "> infovis" + icicle_id;
					var container = jQuery( container_selector );
					var num_children = jQuery( container ).children().length;
					if( num_children == 0 ) {
						jQuery( "#container_" + icicle_id )
							.css( "overflow", "overflow" )
							.css( "left",  layout_icicle.left.toString() + "px" )
							.css( "top",   ( layout_icicle.top -1 ).toString() + "px" )
							.add( "#infovis-canvaswidget, #infovis" )
							.css( "width", layout_icicle.width.toString() + "px" )
							.css( "height", ( layout_icicle.height + 1 ).toString() + "px" );
							
				   		init( layout_icicle1.width, layout_icicle.height );
				   	}
			   	}
			   	
			   	icicle_id = "icicle1";
			   	setup_icicle( icicle_id, layout_icicle1 );
			   	if( deftable == table_two ) setup_icicle( "icicle2", layout_icicle2 );
			   	
				jQuery( ".dropdown-toggle" ).dropdown();

				var body_height = ( jQuery( "h1#firstHeading" ).outerHeight() + layout_icicle1.height + 35 ).toString() + "px";
				jQuery( "#bodyContent" )
					.css( "height", body_height )
					.css( "min-height", body_height );
				jQuery( "div#footer" )
					.css( "margin-left", "0px" );
				scroll_to_heading();
				
			 	jQuery( "#minime_Layouts" ).css( "position", "absolute" )
			    	.css( "position", "absolute" )
			    	.css( "overflow-y", "visible" )
			    	.css( "top", ( dimensions.height + 20 ).toString() + "px" )
			    	.css( "z-index", "-100" )
			    	.css( "left", "-7px" );
				
			}); // mw.loader.using
		}); // jQuery(document).ready
			
			</script>
			
			
			
			
			<div id="container">												<!--   INIT CONTROLS   -->
			
				<div id="container_menue" style="position:absolute;">
			
			  		<div id="container_content" style="padding-left:18px; padding-right:18px;">
  
  <h4 id="wikiname">' . $wgSitename  . '</h4>
  <div class="subtitle">auf Server ' . $eg_PM_LocalServer->getName() . '</div>
  <div class="menue-box">
    <ul class="nav nav-pills">
      <li class="dropdown">
        <a id="drop6" role="button" data-toggle="dropdown" href="#diagram">Protokoll <b class="caret"></b></a>
        <ul id="menu3" class="dropdown-menu" role="menu" aria-labelledby="drop6">
					' . $filelist_as_list_entries . '
        </ul>
      </li>
      <li class="active"><a id="btn_gototop" href="#diagram"><img width="24" height="24" src="' . $wgScriptPath . '/extensions/PerformanceMonitor/js-includes/icons/rewind_all.png"></img></a></li>
      <li class="active"><a id="btn_gotoparent" href="#diagram"><img width="24" height="24" src="' . $wgScriptPath . '/extensions/PerformanceMonitor/js-includes/icons/rewind_one.png"></img></a></li>
      <div style="clear: both"></div>
      <li class="dropdown">
      	<!-- selectLevelsToShow = function( numLevels ) -->
        <a id="drop4" role="button" data-toggle="dropdown" href="#diagram">Levels <b class="caret"></b></a>
        <ul id="i-levels-to-show" name="i-levels-to-show" class="dropdown-menu" role="menu" aria-labelledby="drop4">
    	  <li role="presentation"><a role="menuitem" tabindex="-1" href="javascript:selectLevelsToShow(1);" id="level-1">1 Level </a></li>
    	  <li role="presentation"><a role="menuitem" tabindex="-1" href="javascript:selectLevelsToShow(2);" id="level-1">2 Levels </a></li>
    	  <li role="presentation"><a role="menuitem" tabindex="-1" href="javascript:selectLevelsToShow(3);" id="level-1">3 Levels </a></li>
    	  <li role="presentation"><a role="menuitem" tabindex="-1" href="javascript:selectLevelsToShow(4);" id="level-1">4 Levels </a></li>
    	  <li role="presentation"><a role="menuitem" tabindex="-1" href="javascript:selectLevelsToShow(5);" id="level-1">5 Levels </a></li>
    	  <li role="presentation"><a role="menuitem" tabindex="-1" href="javascript:selectLevelsToShow(6);" id="level-1">6 Levels </a></li>
    	  <li role="presentation" class="divider"></li>
    	  <li role="presentation"><a role="menuitem" tabindex="-1" href="javascript:selectLevelsToShow(0);" id="level-1">alle Levels </a></li>
    	</ul>
      </li>
      <li role="presentation" class="divider"></li>
      <li class="dropdown">
        <a id="drop5" role="button" data-toggle="dropdown" href="#diagram">Protokoll 2 <b class="caret"></b></a>
        <ul id="menu2" class="dropdown-menu" role="menu" aria-labelledby="drop6">
					' . $filelist2_as_list_entries . '
        </ul>
      </li>
    </ul>
  </div>
  
  </div><!-- end div id="container_content" -->
			
			
			<div class="text" style="display:none">
						           
			  <div>
			    <label for="s-orientation">Orientation: </label>
			    <select name="s-orientation" id="s-orientation">
			      <option value="h" selected>horizontal</option>
			      <option value="v">vertical</option>
			    </select>
			    <br>
			    
			    <div id="max-levels">
				    <label for="i-levels-to-show">Max levels: </label>
				    <select  id="i-levels-to-show" name="i-levels-to-show" style="width: 50px">
				      <option>all</option>
				      <option>1</option>
				      <option>2</option>
				      <option selected="selected">3</option>
				      <option>4</option>
				      <option>5</option>
				    </select>
			    </div>
			    
			  </div>
			  
			</div>
			
			</div><!-- end div id="container_menue" -->
			
			<div id="section" style="position:absolute; z-index:100"></div>
			<div id="foo" style="position:absolute; z-index:1;"></div>
			
			<div id="container_icicle1" style="position:absolute;">
			    <div id="infovis1" style="position:absolute;"></div>    
			</div>

			<div id="container_icicle2" style="position:absolute;">
			    <div id="infovis2" style="position:absolute;"></div>    
			</div>
						
			
			</div><!-- end container -->
			
			<div id="minime_Layouts"></div>
			');
	}	// end includeHtml()
	
} // class SpecialPerformanceMonitor